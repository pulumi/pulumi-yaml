resources:
    webSecurityGroup:
        type: aws:ec2/securityGroup:SecurityGroup
        properties:
            vpcId: ${vpc.id}
            egress:
                - protocol: -1
                  fromPort: 0
                  toPort: 0
                  cidrBlocks:
                    - 0.0.0.0/0
            ingress:
                - protocol: tcp
                  fromPort: 80
                  toPort: 80
                  cidrBlocks:
                    - 0.0.0.0/0
    cluster:
        type: aws:ecs/cluster:Cluster
    taskExecRole:
        type: aws:iam/role:Role
        properties:
            assumeRolePolicy:
                Fn::ToJSON:
                    Version: 2008-10-17
                    Statement:
                        - Sid:
                          Effect: Allow
                          Principal:
                            Service: ecs-tasks.amazonaws.com
                          Action: sts:AssumeRole
    taskExecRolePolicyAttachment:
        type: aws:iam/rolePolicyAttachment:RolePolicyAttachment
        properties:
            role: ${taskExecRole.name}
            policyArn: arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
    webLoadBalancer:
        type: aws:elasticloadbalancingv2/loadBalancer:LoadBalancer
        properties:
            subnets: ${subnets.ids}
            securityGroups:
                - ${webSecurityGroup.id}
    webTargetGroup:
        type: aws:elasticloadbalancingv2/targetGroup:TargetGroup
        properties:
            port: 80
            protocol: HTTP
            targetType: ip
            vpcId: ${vpc.id}
    webListener:
        type: aws:elasticloadbalancingv2/listener:Listener
        properties:
            loadBalancerArn: ${webLoadBalancer.arn}
            port: 80
            defaultActions:
                - type: forward
                  targetGroupArn: ${webTargetGroup.arn}
    appTask:
        type: aws:ecs/taskDefinition:TaskDefinition
        properties:
            family: fargate-task-definition
            cpu: 256
            memory: 512
            networkMode: awsvpc
            requiresCompatibilities:
                - FARGATE
            executionRoleArn: ${taskExecRole.arn}
            containerDefinitions:
                Fn::ToJSON:
                    - name: my-app
                      image: nginx
                      portMappings:
                        - containerPort: 80
                          hostPort: 80
                          protocol: tcp
    appService:
        type: aws:ecs/service:Service
        properties:
            cluster: ${cluster.arn}
            desiredCount: 5
            launchType: FARGATE
            taskDefinition: ${appTask.arn}
            networkConfiguration:
                assignPublicIp: true
                subnets: ${subnets.ids}
                securityGroups:
                    - ${webSecurityGroup.id}
            loadBalancers:
                - targetGroupArn: ${webTargetGroup.arn}
                  containerName: my-app
                  containerPort: 80
        options:
            dependson:
                - ${webListener}
variables:
    vpc:
        Fn::Invoke:
            Function: aws:ec2/getVpc:getVpc
            Arguments:
                default: true
    subnets:
        Fn::Invoke:
            Function: aws:ec2/getSubnetIds:getSubnetIds
            Arguments:
                vpcId: ${vpc.id}
outputs:
    url: ${webLoadBalancer.dnsName}
